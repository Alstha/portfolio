// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  role      String    @default("outsider")
  bio       String?
  avatar    String?
  github    String?
  linkedin  String?
  twitter   String?
  website   String?
  projects  Project[]
  blogs     Blog[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id           String   @id @default(cuid())
  title        String
  description  String
  technologies String   // Will store JSON string of technologies array
  category     String?
  year         String?
  details      String?
  image        String?
  githubUrl    String?
  liveUrl      String?
  featured     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String?
  user         User?    @relation(fields: [userId], references: [id])
}

model Blog {
  id        String    @id @default(cuid())
  title     String
  content   String
  excerpt   String?
  image     String?
  tags      String?  // Will store JSON string of tags array
  comments  String?  // Will store JSON string of comments array
  published Boolean  @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogComments Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model Feedback {
  id        String   @id @default(cuid())
  name      String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
